AWSTemplateFormatVersion: 2010-09-09
Description: >-
  binance-trading

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  EnvironmentParameter:
    Type: String
    Description: Environment where the stack is deployed
    Default: test
    AllowedValues:
      - test
      - prod
  TracingParameter:
    Description: Boolean to enable or disable tracing
    Type: String
    Default: false
  BinanceUrlParameter:
    Description: URL of the Binance API
    Type: String
    Default: https://testnet.binance.vision/api
  BinanceSecretNameParameter:
    Description: Name of the Binance secret stored in Secrets Manager
    Type: String
    Default: test-BinanceTrading-Secret
  BinanceSecretEncryptionKeyParameter:
    Description: Encryption key used to encrypt the Binance secret in Secrets Manager (either a key id 'key/xxx' or an alias 'alias/xxx')
    Type: String
    Default: alias/aws/secretsmanager

Conditions:
  TracingCondition: !Equals [ !Ref TracingParameter, true ]

Mappings:
  EnvironmentMap:
    test:
      DcaTradingConfig: '{ "baseAsset": "BTC", "quoteAsset": "BUSD", "quoteAssetQuantity": 25, "tradeAssets": [ { "asset": "ETH|BNB", "percentage": 0.50 } ] }'
      DcaTradingSchedule: cron(0 18 ? * * *)
      PublishAllActiveStrategiesSchedule: rate(1 minute)
    prod:
      DcaTradingConfig: '{ "baseAsset": "BTC", "quoteAsset": "EUR", "quoteAssetQuantity": 25, "tradeAssets": [ { "asset": "ETH", "percentage": 0.28 }, { "asset":"XRP", "percentage": 0.28 }, { "asset": "ADA|MATIC", "percentage": 0.20 } ] }'
      DcaTradingSchedule: cron(0 18 ? * 1 *)

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 30
    AutoPublishAlias: Live
    Tracing: !If [ TracingCondition, Active, PassThrough ]
    Environment:
      Variables:
        ENV: !Ref EnvironmentParameter
        REGION: !Ref AWS::Region
        TRACING: !Ref TracingParameter

Resources:
  DcaTradingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: DCA trading function
      CodeUri: dist/webpack/dca-trading-handler
      Handler: app.handler
      ReservedConcurrentExecutions: 1
      Environment:
        Variables:
          BINANCE_URL: !Ref BinanceUrlParameter
          BINANCE_SECRET_NAME: !Ref BinanceSecretNameParameter
          TRADING_TABLE_NAME: !Ref TradingTable
          DCA_TRADING_CONFIG: !FindInMap [ EnvironmentMap, !Ref EnvironmentParameter, DcaTradingConfig ]
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Enabled: true
            Schedule: !FindInMap [ EnvironmentMap, !Ref EnvironmentParameter, DcaTradingSchedule ]
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BinanceSecretNameParameter}*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${BinanceSecretEncryptionKeyParameter}
        - DynamoDBReadPolicy:
            TableName: !Ref TradingTable
        - DynamoDBWritePolicy:
            TableName: !Ref TradingTable

  PublishAllActiveStrategiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Publish all active strategies function
      CodeUri: dist/webpack/publish-all-active-strategies-handler
      Handler: app.handler
      ReservedConcurrentExecutions: 1
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          STRATEGY_TABLE_NAME: !Ref StrategyTable
          ACTIVE_STRATEGIES_QUEUE_URL: !Ref ActiveStrategiesQueue
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Enabled: true
            Schedule: !FindInMap [ EnvironmentMap, !Ref EnvironmentParameter, PublishAllActiveStrategiesSchedule ]
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StrategyTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ActiveStrategiesQueue.QueueName

  EvaluateStrategyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Evaluate strategy function
      CodeUri: dist/webpack/evaluate-strategy-handler
      Handler: app.handler
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          BINANCE_URL: !Ref BinanceUrlParameter
          BINANCE_SECRET_NAME: !Ref BinanceSecretNameParameter
          STRATEGY_TABLE_NAME: !Ref StrategyTable
          PROCESSED_STRATEGY_STEP_QUEUE_URL: !Ref ProcessedStrategyStepQueue
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !GetAtt ActiveStrategiesQueue.Arn
            BatchSize: 1
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BinanceSecretNameParameter}*
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
              Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${BinanceSecretEncryptionKeyParameter}
        - DynamoDBReadPolicy:
            TableName: !Ref StrategyTable
        - DynamoDBWritePolicy:
            TableName: !Ref StrategyTable
        - SQSPollerPolicy:
            QueueName: !GetAtt ActiveStrategiesQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessedStrategyStepQueue.QueueName

  UpdateStrategyBudgetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Update strategy budget function
      CodeUri: dist/webpack/update-strategy-budget-handler
      Handler: app.handler
      EventInvokeConfig:
        MaximumRetryAttempts: 0
      Environment:
        Variables:
          STRATEGY_TABLE_NAME: !Ref StrategyTable
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Enabled: true
            Queue: !GetAtt ProcessedStrategyStepQueue.Arn
            BatchSize: 1
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref StrategyTable
        - DynamoDBWritePolicy:
            TableName: !Ref StrategyTable
        - SQSPollerPolicy:
            QueueName: !GetAtt ActiveStrategiesQueue.QueueName

  TradingTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S

  StrategyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: activeStrategiesPk
          AttributeType: S
        - AttributeName: activeStrategiesSk
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: ActiveStrategies-Index
          KeySchema:
            - AttributeName: activeStrategiesPk
              KeyType: HASH
            - AttributeName: activeStrategiesSk
              KeyType: RANGE
          Projection:
            ProjectionType: KEYS_ONLY

  ActiveStrategiesQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 60
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId

  ProcessedStrategyStepQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      VisibilityTimeout: 90
      MessageRetentionPeriod: 60
      DeduplicationScope: messageGroup
      FifoThroughputLimit: perMessageGroupId

Outputs:
  DcaTradingFunctionName:
    Description: DCA trading function name
    Value: !Ref DcaTradingFunction
  DcaTradingFunctionArn:
    Description: DCA trading function ARN
    Value: !GetAtt DcaTradingFunction.Arn

  PublishAllActiveStrategiesFunctionName:
    Description: Publish all active strategies function name
    Value: !Ref PublishAllActiveStrategiesFunction
  PublishAllActiveStrategiesFunctionArn:
    Description: Publish all active strategies function ARN
    Value: !GetAtt PublishAllActiveStrategiesFunction.Arn

  EvaluateStrategyFunctionName:
    Description: Evaluate strategy function name
    Value: !Ref EvaluateStrategyFunction
  EvaluateStrategyFunctionArn:
    Description: Evaluate strategy function ARN
    Value: !GetAtt EvaluateStrategyFunction.Arn

  TradingTableName:
    Description: Trading table name
    Value: !Ref TradingTable
  TradingTableArn:
    Description: Trading table ARN
    Value: !GetAtt TradingTable.Arn

  StrategyTableName:
    Description: Strategy table name
    Value: !Ref StrategyTable
  StrategyTableArn:
    Description: Strategy table ARN
    Value: !GetAtt StrategyTable.Arn

  ActiveStrategiesQueueName:
    Description: Active strategies queue name
    Value: !GetAtt ActiveStrategiesQueue.QueueName
  ActiveStrategiesQueueArn:
    Description: Active strategies queue ARN
    Value: !GetAtt ActiveStrategiesQueue.Arn
  ActiveStrategiesQueueUrl:
    Description: Active strategies queue URL
    Value: !Ref ActiveStrategiesQueue
